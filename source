--[[
	RBXScriptHub Lib
	Custom UI Library for Roblox
	Created by [Your Name]
]]

local RBXScriptHubLib = {}

-- Services
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Environment Check
local isStudio = RunService:IsStudio()

-- Configuration
local ConfigurationFolder = "RBXScriptHub"
local ConfigurationExtension = ".rsh"
local debugMode = false

-- Theme Definition
RBXScriptHubLib.Themes = {
	Default = {
		Background = Color3.fromRGB(30, 30, 30),
		Topbar = Color3.fromRGB(40, 40, 40),
		TextColor = Color3.fromRGB(220, 220, 220),
		ElementBackground = Color3.fromRGB(45, 45, 45),
		ElementBackgroundHover = Color3.fromRGB(55, 55, 55),
		ElementStroke = Color3.fromRGB(60, 60, 60),
		ToggleEnabled = Color3.fromRGB(0, 120, 255),
		ToggleDisabled = Color3.fromRGB(100, 100, 100),
		SliderBackground = Color3.fromRGB(50, 50, 50),
		SliderProgress = Color3.fromRGB(0, 120, 255),
	},
}

-- Library State
local currentTheme = RBXScriptHubLib.Themes.Default
local flags = {}
local hidden = false
local debounce = false
local configurationEnabled = false
local configurationFileName = nil

-- Utility Functions
local function logDebug(message)
	if debugMode then
		warn("[RBXScriptHub Lib] " .. message)
	end
end

local function getSafeParent()
	if gethui then
		return gethui()
	elseif syn and syn.protect_gui then
		syn.protect_gui(RBXScriptHubLib.UI)
		return CoreGui
	else
		return CoreGui:FindFirstChild("RobloxGui") or CoreGui
	end
end

local function saveConfiguration()
	if not configurationEnabled or not configurationFileName then
		return
	end
	logDebug("Saving configuration")
	local data = {}
	for flag, settings in pairs(flags) do
		data[flag] = settings.CurrentValue
	end
	if writefile then
		local success, err = pcall(function()
			writefile(ConfigurationFolder .. "/" .. configurationFileName .. ConfigurationExtension, HttpService:JSONEncode(data))
		end)
		if not success then
			warn("Failed to save configuration: " .. err)
		end
	end
end

local function loadConfiguration()
	if not configurationEnabled or not configurationFileName then
		return
	end
	logDebug("Loading configuration")
	local success, data = pcall(function()
		if isStudio then
			return HttpService:JSONDecode('{"Toggle1":true,"Slider1":50}')
		elseif isfile and isfile(ConfigurationFolder .. "/" .. configurationFileName .. ConfigurationExtension) then
			return HttpService:JSONDecode(readfile(ConfigurationFolder .. "/" .. configurationFileName .. ConfigurationExtension))
		end
	end)
	if success and data then
		for flag, value in pairs(data) do
			if flags[flag] then
				flags[flag]:Set(value)
			end
		end
		RBXScriptHubLib:Notify("Configuration Loaded", "Loaded settings from previous session.")
	else
		RBXScriptHubLib:Notify("Configuration Error", "Failed to load configuration.")
	end
end

-- UI Setup
local function createUI()
	local ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "RBXScriptHubUI"
	ScreenGui.DisplayOrder = 100
	ScreenGui.Parent = getSafeParent()

	local Main = Instance.new("Frame")
	Main.Size = UDim2.new(0, 400, 0, 300)
	Main.Position = UDim2.new(0.5, -200, 0.5, -150)
	Main.BackgroundColor3 = currentTheme.Background
	Main.ClipsDescendants = true
	Main.Parent = ScreenGui

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 8)
	UICorner.Parent = Main

	local Topbar = Instance.new("Frame")
	Topbar.Size = UDim2.new(1, 0, 0, 40)
	Topbar.BackgroundColor3 = currentTheme.Topbar
	Topbar.Parent = Main

	local TopbarCorner = Instance.new("UICorner")
	TopbarCorner.CornerRadius = UDim.new(0, 8)
	TopbarCorner.Parent = Topbar

	local Title = Instance.new("TextLabel")
	Title.Size = UDim2.new(0, 200, 1, 0)
	Title.Position = UDim2.new(0, 10, 0, 0)
	Title.BackgroundTransparency = 1
	Title.Text = "RBXScriptHub"
	Title.TextColor3 = currentTheme.TextColor
	Title.TextSize = 16
	Title.Font = Enum.Font.SourceSansBold
	Title.TextXAlignment = Enum.TextXAlignment.Left
	Title.Parent = Topbar

	local HideButton = Instance.new("ImageButton")
	HideButton.Size = UDim2.new(0, 24, 0, 24)
	HideButton.Position = UDim2.new(1, -34, 0.5, -12)
	HideButton.BackgroundTransparency = 1
	HideButton.Image = "rbxassetid://3926305904"
	HideButton.ImageRectOffset = Vector2.new(404, 284)
	HideButton.ImageRectSize = Vector2.new(36, 36)
	HideButton.Parent = Topbar

	local Elements = Instance.new("Frame")
	Elements.Size = UDim2.new(1, -10, 1, -50)
	Elements.Position = UDim2.new(0, 5, 0, 45)
	Elements.BackgroundTransparency = 1
	Elements.Parent = Main

	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 5)
	UIListLayout.Parent = Elements

	local Notifications = Instance.new("Frame")
	Notifications.Size = UDim2.new(0, 300, 1, 0)
	Notifications.Position = UDim2.new(1, -310, 0, 0)
	Notifications.BackgroundTransparency = 1
	Notifications.Parent = ScreenGui

	local NotificationsLayout = Instance.new("UIListLayout")
	NotificationsLayout.SortOrder = Enum.SortOrder.LayoutOrder
	NotificationsLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
	NotificationsLayout.Padding = UDim.new(0, 5)
	NotificationsLayout.Parent = Notifications

	return ScreenGui, Main, Topbar, Elements, Notifications, HideButton
end

-- Drag Functionality
local function makeDraggable(frame)
	local dragging = false
	local dragInput, dragStart, startPos

	local function updateInput(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			updateInput(input)
		end
	end)
end

-- Notification System
function RBXScriptHubLib:Notify(title, content, duration)
	duration = duration or 5
	local notification = Instance.new("Frame")
	notification.Size = UDim2.new(0, 280, 0, 60)
	notification.BackgroundColor3 = currentTheme.Background
	notification.BackgroundTransparency = 1
	notification.Parent = RBXScriptHubLib.Notifications

	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0, 6)
	UICorner.Parent = notification

	local Title = Instance.new("TextLabel")
	Title.Size = UDim2.new(1, -10, 0, 20)
	Title.Position = UDim2.new(0, 5, 0, 5)
	Title.BackgroundTransparency = 1
	Title.Text = title
	Title.TextColor3 = currentTheme.TextColor
	Title.TextSize = 14
	Title.Font = Enum.Font.SourceSansBold
	Title.TextTransparency = 1
	Title.TextXAlignment = Enum.TextXAlignment.Left
	Title.Parent = notification

	local Content = Instance.new("TextLabel")
	Content.Size = UDim2.new(1, -10, 0, 30)
	Content.Position = UDim2.new(0, 5, 0, 25)
	Content.BackgroundTransparency = 1
	Content.Text = content
	Content.TextColor3 = currentTheme.TextColor
	Content.TextSize = 12
	Content.Font = Enum.Font.SourceSans
	Content.TextTransparency = 1
	Content.TextXAlignment = Enum.TextXAlignment.Left
	Content.TextWrapped = true
	Content.Parent = notification

	notification.Visible = true
	TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {BackgroundTransparency = 0.5}):Play()
	TweenService:Create(Title, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
	TweenService:Create(Content, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()

	task.delay(duration, function()
		TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
		TweenService:Create(Title, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
		TweenService:Create(Content, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
		task.wait(0.5)
		notification:Destroy()
	end)
end

-- Window Creation
function RBXScriptHubLib:CreateWindow(settings)
	local window = {}
	configurationEnabled = settings.ConfigurationSaving and settings.ConfigurationSaving.Enabled
	configurationFileName = settings.ConfigurationSaving and settings.ConfigurationSaving.FileName

	-- Initialize UI
	RBXScriptHubLib.UI, RBXScriptHubLib.Main, RBXScriptHubLib.Topbar, RBXScriptHubLib.Elements, RBXScriptHubLib.Notifications, RBXScriptHubLib.HideButton = createUI()
	RBXScriptHubLib.Topbar.Title.Text = settings.Name or "RBXScriptHub"
	makeDraggable(RBXScriptHubLib.Main)

	-- Hide Functionality
	local function hide()
		if debounce then return end
		debounce = true
		hidden = true
		TweenService:Create(RBXScriptHubLib.Main, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 400, 0, 0)}):Play()
		task.wait(0.5)
		RBXScriptHubLib.Main.Visible = false
		debounce = false
		RBXScriptHubLib:Notify("Interface Hidden", "Press K to show the interface.", 7)
	end

	local function show()
		if debounce then return end
		debounce = true
		hidden = false
		RBXScriptHubLib.Main.Visible = true
		TweenService:Create(RBXScriptHubLib.Main, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 400, 0, 300)}):Play()
		task.wait(0.5)
		debounce = false
	end

	RBXScriptHubLib.HideButton.MouseButton1Click:Connect(function()
		if hidden then show() else hide() end
	end)

	UserInputService.InputBegan:Connect(function(input, processed)
		if input.KeyCode == Enum.KeyCode.K and not processed then
			if hidden then show() else hide() end
		end
	end)

	-- Tab Creation
	function window:CreateTab(tabSettings)
		local tab = {}
		local tabButton = Instance.new("TextButton")
		tabButton.Size = UDim2.new(0, 100, 0, 30)
		tabButton.Position = UDim2.new(0, 110, 0, 5)
		tabButton.BackgroundColor3 = currentTheme.ElementBackground
		tabButton.Text = tabSettings.Name
		tabButton.TextColor3 = currentTheme.TextColor
		tabButton.TextSize = 14
		tabButton.Font = Enum.Font.SourceSans
		tabButton.Parent = RBXScriptHubLib.Topbar

		local tabPage = Instance.new("Frame")
		tabPage.Size = UDim2.new(1, 0, 1, 0)
		tabPage.BackgroundTransparency = 1
		tabPage.Visible = false
		tabPage.Parent = RBXScriptHubLib.Elements

		local tabLayout = Instance.new("UIListLayout")
		tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
		tabLayout.Padding = UDim.new(0, 5)
		tabLayout.Parent = tabPage

		tabButton.MouseButton1Click:Connect(function()
			for _, page in ipairs(RBXScriptHubLib.Elements:GetChildren()) do
				if page:IsA("Frame") then
					page.Visible = (page == tabPage)
				end
			end
		end)

		-- Button Element
		function tab:CreateButton(buttonSettings)
			local button = Instance.new("TextButton")
			button.Size = UDim2.new(1, -10, 0, 30)
			button.BackgroundColor3 = currentTheme.ElementBackground
			button.Text = buttonSettings.Name
			button.TextColor3 = currentTheme.TextColor
			button.TextSize = 14
			button.Font = Enum.Font.SourceSans
			button.Parent = tabPage

			local UICorner = Instance.new("UICorner")
			UICorner.CornerRadius = UDim.new(0, 4)
			UICorner.Parent = button

			button.MouseEnter:Connect(function()
				TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = currentTheme.ElementBackgroundHover}):Play()
			end)

			button.MouseLeave:Connect(function()
				TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = currentTheme.ElementBackground}):Play()
			end)

			button.MouseButton1Click:Connect(function()
				local success, err = pcall(buttonSettings.Callback)
				if not success then
					RBXScriptHubLib:Notify("Callback Error", "Button callback failed: " .. err)
				end
			end)
		end

		-- Toggle Element
		function tab:CreateToggle(toggleSettings)
			local toggle = {}
			toggle.CurrentValue = toggleSettings.CurrentValue or false
			toggle.Callback = toggleSettings.Callback or function() end
			toggle.Flag = toggleSettings.Flag

			local toggleFrame = Instance.new("Frame")
			toggleFrame.Size = UDim2.new(1, -10, 0, 30)
			toggleFrame.BackgroundColor3 = currentTheme.ElementBackground
			toggleFrame.Parent = tabPage

			local UICorner = Instance.new("UICorner")
			UICorner.CornerRadius = UDim.new(0, 4)
			UICorner.Parent = toggleFrame

			local title = Instance.new("TextLabel")
			title.Size = UDim2.new(1, -50, 1, 0)
			title.Position = UDim2.new(0, 10, 0, 0)
			title.BackgroundTransparency = 1
			title.Text = toggleSettings.Name
			title.TextColor3 = currentTheme.TextColor
			title.TextSize = 14
			title.Font = Enum.Font.SourceSans
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Parent = toggleFrame

			local switch = Instance.new("Frame")
			switch.Size = UDim2.new(0, 40, 0, 20)
			switch.Position = UDim2.new(1, -45, 0.5, -10)
			switch.BackgroundColor3 = toggle.CurrentValue and currentTheme.ToggleEnabled or currentTheme.ToggleDisabled
			switch.Parent = toggleFrame

			local switchCorner = Instance.new("UICorner")
			switchCorner.CornerRadius = UDim.new(0, 10)
			switchCorner.Parent = switch

			toggleFrame.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					toggle.CurrentValue = not toggle.CurrentValue
					TweenService:Create(switch, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = toggle.CurrentValue and currentTheme.ToggleEnabled or currentTheme.ToggleDisabled}):Play()
					local success, err = pcall(toggle.Callback, toggle.CurrentValue)
					if not success then
						RBXScriptHubLib:Notify("Callback Error", "Toggle callback failed: " .. err)
					end
					if toggle.Flag then
						flags[toggle.Flag] = toggle
						saveConfiguration()
					end
				end
			end)

			function toggle:Set(value)
				toggle.CurrentValue = value
				TweenService:Create(switch, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = toggle.CurrentValue and currentTheme.ToggleEnabled or currentTheme.ToggleDisabled}):Play()
				local success, err = pcall(toggle.Callback, toggle.CurrentValue)
				if not success then
					RBXScriptHubLib:Notify("Callback Error", "Toggle callback failed: " .. err)
				end
				if toggle.Flag then
					saveConfiguration()
				end
			end

			if toggle.Flag then
				flags[toggle.Flag] = toggle
			end

			return toggle
		end

		-- Slider Element
		function tab:CreateSlider(sliderSettings)
			local slider = {}
			slider.CurrentValue = sliderSettings.CurrentValue or sliderSettings.Range[1]
			slider.Callback = sliderSettings.Callback or function() end
			slider.Flag = sliderSettings.Flag
			slider.Range = sliderSettings.Range
			slider.Increment = sliderSettings.Increment or 1
			slider.Suffix = sliderSettings.Suffix

			local sliderFrame = Instance.new("Frame")
			sliderFrame.Size = UDim2.new(1, -10, 0, 50)
			sliderFrame.BackgroundColor3 = currentTheme.ElementBackground
			sliderFrame.Parent = tabPage

			local UICorner = Instance.new("UICorner")
			UICorner.CornerRadius = UDim.new(0, 4)
			UICorner.Parent = sliderFrame

			local title = Instance.new("TextLabel")
			title.Size = UDim2.new(1, -10, 0, 20)
			title.Position = UDim2.new(0, 5, 0, 5)
			title.BackgroundTransparency = 1
			title.Text = sliderSettings.Name
			title.TextColor3 = currentTheme.TextColor
			title.TextSize = 14
			title.Font = Enum.Font.SourceSans
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Parent = sliderFrame

			local sliderBar = Instance.new("Frame")
			sliderBar.Size = UDim2.new(1, -20, 0, 10)
			sliderBar.Position = UDim2.new(0, 10, 0, 30)
			sliderBar.BackgroundColor3 = currentTheme.SliderBackground
			sliderBar.Parent = sliderFrame

			local sliderProgress = Instance.new("Frame")
			sliderProgress.Size = UDim2.new((slider.CurrentValue - slider.Range[1]) / (slider.Range[2] - slider.Range[1]), 0, 1, 0)
			sliderProgress.BackgroundColor3 = currentTheme.SliderProgress
			sliderProgress.Parent = sliderBar

			local valueLabel = Instance.new("TextLabel")
			valueLabel.Size = UDim2.new(0, 50, 0, 20)
			valueLabel.Position = UDim2.new(1, -60, 0, 5)
			valueLabel.BackgroundTransparency = 1
			valueLabel.Text = tostring(slider.CurrentValue) .. (slider.Suffix or "")
			valueLabel.TextColor3 = currentTheme.TextColor
			valueLabel.TextSize = 12
			valueLabel.Font = Enum.Font.SourceSans
			valueLabel.Parent = sliderFrame

			local dragging = false
			sliderBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging = true
				end
			end)

			sliderBar.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging = false
				end
			end)

			UserInputService.InputChanged:Connect(function(input)
				if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					local mouseX = input.Position.X
					local barX = sliderBar.AbsolutePosition.X
					local barWidth = sliderBar.AbsoluteSize.X
					local t = math.clamp((mouseX - barX) / barWidth, 0, 1)
					local newValue = slider.Range[1] + t * (slider.Range[2] - slider.Range[1])
					newValue = math.floor(newValue / slider.Increment + 0.5) * slider.Increment
					slider.CurrentValue = newValue
					sliderProgress.Size = UDim2.new(t, 0, 1, 0)
					valueLabel.Text = tostring(newValue) .. (slider.Suffix or "")
					local success, err = pcall(slider.Callback, newValue)
					if not success then
						RBXScriptHubLib:Notify("Callback Error", "Slider callback failed: " .. err)
					end
					if slider.Flag then
						flags[slider.Flag] = slider
						saveConfiguration()
					end
				end
			end)

			function slider:Set(value)
				value = math.clamp(value, slider.Range[1], slider.Range[2])
				slider.CurrentValue = value
				local t = (value - slider.Range[1]) / (slider.Range[2] - slider.Range[1])
				TweenService:Create(sliderProgress, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = UDim2.new(t, 0, 1, 0)}):Play()
				valueLabel.Text = tostring(value) .. (slider.Suffix or "")
				local success, err = pcall(slider.Callback, value)
				if not success then
					RBXScriptHubLib:Notify("Callback Error", "Slider callback failed: " .. err)
				end
				if slider.Flag then
					saveConfiguration()
				end
			end

			if slider.Flag then
				flags[slider.Flag] = slider
			end

			return slider
		end

		return tab
	end

	-- Load Configuration
	task.delay(2, loadConfiguration)

	return window
end

-- Public Methods
function RBXScriptHubLib:SetVisibility(visible)
	if visible then
		RBXScriptHubLib.Main.Visible = true
		TweenService:Create(RBXScriptHubLib.Main, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 400, 0, 300)}):Play()
		hidden = false
	else
		TweenService:Create(RBXScriptHubLib.Main, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 400, 0, 0)}):Play()
		task.wait(0.5)
		RBXScriptHubLib.Main.Visible = false
		hidden = true
	end
end

function RBXScriptHubLib:IsVisible()
	return not hidden
end

function RBXScriptHubLib:Destroy()
	if RBXScriptHubLib.UI then
		RBXScriptHubLib.UI:Destroy()
	end
end

return RBXScriptHubLib
